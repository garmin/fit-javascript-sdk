/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.161.0Release
// Tag = production/release/21.161.0-0-g58854c0
/////////////////////////////////////////////////////////////////////////////////////////////


import FIT from "./fit.js";

const ONE_MEGABYTE = 1048576;
const TEN_MEGABYTES = ONE_MEGABYTE * 10;
const HALF_MEGABYTE = ONE_MEGABYTE / 2;

class OutputStream {
    #arrayBuffer = null;
    #dataView = null;
    #byteOffset = 0;
    #resizeByBytes = 0;
    #baseTypeDefinitions = null;
    #textEncoder = new TextEncoder();

    /**
     * Creates an OutputStream
     * @constructor
     * @param {Object=} [options] - Read options (optional)
     * @param {Number} [options.initialByteLength=0.5MB] - (optional, default 0.5 MB)
     * @param {Number} [options.maxByteLength=2MB] - (optional, default 2 MB)
     * @param {Number} [options.resizeByBytes=0.5MB] - (optional, default 0.5 MB)
     */
    constructor({
        initialByteLength = HALF_MEGABYTE,
        maxByteLength = TEN_MEGABYTES,
        resizeByBytes = HALF_MEGABYTE,
    } = {}) {
        this.#arrayBuffer = new ArrayBuffer(initialByteLength, { maxByteLength, });
        this.#dataView = new DataView(this.#arrayBuffer);

        this.#resizeByBytes = resizeByBytes;

        this.#baseTypeDefinitions = {
            [FIT.BaseType.ENUM]: { setValue: this.#dataView.setUint8.bind(this.#dataView), size: 1, mask: 0xFF, },
            [FIT.BaseType.UINT8]: { setValue: this.#dataView.setUint8.bind(this.#dataView), size: 1, mask: 0xFF, },
            [FIT.BaseType.UINT16]: { setValue: this.#dataView.setUint16.bind(this.#dataView), size: 2, mask: 0xFFFF, },
            [FIT.BaseType.UINT32]: { setValue: this.#dataView.setUint32.bind(this.#dataView), size: 4, mask: 0xFFFFFFFF, },
            [FIT.BaseType.UINT64]: { setValue: this.#dataView.setBigUint64.bind(this.#dataView), size: 8, mask: 0xFFFFFFFFFFFFFFFFn, },
            [FIT.BaseType.SINT8]: { setValue: this.#dataView.setInt8.bind(this.#dataView), size: 1, mask: 0xFF, },
            [FIT.BaseType.SINT16]: { setValue: this.#dataView.setInt16.bind(this.#dataView), size: 2, mask: 0xFFFF, },
            [FIT.BaseType.SINT32]: { setValue: this.#dataView.setInt32.bind(this.#dataView), size: 4, mask: 0xFFFFFFFF, },
            [FIT.BaseType.SINT64]: { setValue: this.#dataView.setBigInt64.bind(this.#dataView), size: 8, mask: 0xFFFFFFFFFFFFFFFFn, },
            [FIT.BaseType.FLOAT32]: { setValue: this.#dataView.setFloat32.bind(this.#dataView), size: 4, },
            [FIT.BaseType.FLOAT64]: { setValue: this.#dataView.setFloat64.bind(this.#dataView), size: 8, },
            [FIT.BaseType.UINT8Z]: { setValue: this.#dataView.setUint8.bind(this.#dataView), size: 1, mask: 0xFF, },
            [FIT.BaseType.UINT16Z]: { setValue: this.#dataView.setUint16.bind(this.#dataView), size: 2, mask: 0xFFFF, },
            [FIT.BaseType.UINT32Z]: { setValue: this.#dataView.setUint32.bind(this.#dataView), size: 4, mask: 0xFFFFFFFF, },
            [FIT.BaseType.UINT64Z]: { setValue: this.#dataView.setBigUint64.bind(this.#dataView), size: 8, mask: 0xFFFFFFFFFFFFFFFFn, },
            [FIT.BaseType.BYTE]: { setValue: this.#dataView.setUint8.bind(this.#dataView), size: 1, mask: 0xFF, },
        };
    }

    get length() {
        return this.#byteOffset;
    }
    get uint8Array() {
        return new Uint8Array(this.#arrayBuffer.slice(0, this.#byteOffset));
    }

    writeUInt8(value) {
        return this.write(value, FIT.BaseType.UINT8);
    }

    writeUInt16(value) {
        return this.write(value, FIT.BaseType.UINT16);
    }

    writeUInt32(value) {
        return this.write(value, FIT.BaseType.UINT32);
    }

    writeUInt64(value) {
        return this.write(value, FIT.BaseType.UINT64);
    }

    writeSInt8(value) {
        return this.write(value, FIT.BaseType.SINT8);
    }

    writeSInt16(value) {
        return this.write(value, FIT.BaseType.SINT16);
    }

    writeSInt32(value) {
        return this.write(value, FIT.BaseType.SINT32);
    }

    writeSInt64(value) {
        return this.write(value, FIT.BaseType.SINT64);
    }

    writeFloat32(value) {
        return this.write(value, FIT.BaseType.FLOAT32);
    }

    writeFloat64(value) {
        return this.write(value, FIT.BaseType.FLOAT64);
    }

    writeUInt8z(value) {
        return this.write(value, FIT.BaseType.UINT8Z);
    }

    writeUInt16z(value) {
        return this.write(value, FIT.BaseType.UINT16Z);
    }

    writeUInt32z(value) {
        return this.write(value, FIT.BaseType.UINT32Z);
    }

    writeUInt64z(value) {
        return this.write(value, FIT.BaseType.UINT64Z);
    }

    writeByte(value) {
        return this.write(value, FIT.BaseType.BYTE);
    }

    writeString(text) {
        const bytes = this.#textEncoder.encode(text);

        this.#resizeIfNeeded(bytes.byteLength);

        const uint8Array = new Uint8Array(this.#arrayBuffer, this.#byteOffset, bytes.byteLength);
        uint8Array.set(bytes);

        this.#byteOffset += bytes.byteLength;

        // Add a null terminator
        this.writeUInt8(0);

        return this;
    }

    write(value, baseType) {
        if (baseType === FIT.BaseType.STRING) {
            return this.writeString(value);
        }

        this.#setValues(baseType, value);

        return;
    }

    set(typedarray, targetOffset = 0) {
        this.#resizeIfNeeded(typedarray.byteLength + targetOffset);

        const uint8Array = new Uint8Array(this.#arrayBuffer);
        uint8Array.set(typedarray, targetOffset);

        this.#byteOffset = Math.max(this.#byteOffset, typedarray.byteLength + targetOffset);

        return this;
    }

    [Symbol.iterator]() {
        let start = 0;
        const end = this.#byteOffset;
        const dataView = this.#dataView;

        return {
            next() {
                if (start < end) {
                    return { value: dataView.getUint8(start++), done: false, };
                }
                else {
                    return { done: true, };
                }
            },
        };
    }

    #setValues(baseType, value) {
        const values = Array.isArray(value) ? value : [value,];

        values.forEach((value) => {
            return this.#setValue(baseType, value);
        });
    }

    #setValue(baseType, value) {
        const def = this.#baseTypeDefinitions[baseType];

        this.#resizeIfNeeded(def.size);

        const val = def.mask == null ? value : value & def.mask;

        def.setValue(this.#byteOffset, val, true);
        this.#byteOffset += def.size;

        return this;
    }

    #resizeIfNeeded(byteCount = 1) {
        if (this.#arrayBuffer.byteLength - this.#byteOffset >= byteCount) {
            return;
        }

        if (!this.#arrayBuffer.resizable) {
            throw new Error("Can not resize OutputStream. Set a larger initial size.");
        }

        this.#arrayBuffer.resize(this.#arrayBuffer.byteLength + Math.max(this.#resizeByBytes, byteCount));
    }
}

export default OutputStream;
