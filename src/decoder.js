/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2025 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.161.0Release
// Tag = production/release/21.161.0-0-g58854c0
/////////////////////////////////////////////////////////////////////////////////////////////


import Accumulator from "../src/accumulator.js";
import BitStream from "../src/bit-stream.js";
import CrcCalculator from "./crc-calculator.js";
import FIT from "./fit.js";
import HrMesgUtils from "./utils-hr-mesg.js";
import Profile from "./profile.js";
import Stream from "./stream.js";
import Utils from "./utils.js";
import UtilsInternal from "./utils-internal.js";

const COMPRESSED_HEADER_MASK = 0x80;
const MESG_DEFINITION_MASK = 0x40;
const DEV_DATA_MASK = 0x20;
const MESG_HEADER_MASK = 0x00;
const LOCAL_MESG_NUM_MASK = 0x0F;

const HEADER_WITH_CRC_SIZE = 14;
const HEADER_WITHOUT_CRC_SIZE = 12;
const CRC_SIZE = 2;

const DecodeMode = Object.freeze({
    NORMAL: "normal",
    SKIP_HEADER: "skipHeader",
    DATA_ONLY: "dataOnly"
});

class Decoder {
    #localMessageDefinitions = [];
    #developerDataDefinitions = {};
    #stream = null;
    #accumulator = new Accumulator();
    #messages = {};
    #fieldsWithSubFields = [];
    #fieldsToExpand = [];

    #decodeMode = DecodeMode.NORMAL;

    #mesgListener = null;
    #mesgDefinitionListener = null;
    #fieldDescriptionListener = null;
    #optExpandSubFields = true;
    #optExpandComponents = true;
    #optApplyScaleAndOffset = true;
    #optConvertTypesToStrings = true;
    #optConvertDateTimesToDates = true;
    #optIncludeUnknownData = false;
    #optMergeHeartRates = true;

    /**
     * Creates a FIT File Decoder
     * @constructor
     * @param {Stream} stream - representing the FIT file to decode
     */
    constructor(stream) {
        if (stream == null) {
            throw Error("FIT Runtime Error stream parameter is null or undefined");
        }

        this.#stream = stream;
    }

    /**
     * Inspects the file header to determine if the input stream is a FIT file
     * @param {Stream} stream
     * @returns {Boolean} True if the stream is a FIT file
     * @static
     */
    static isFIT(stream) {
        try {
            const fileHeaderSize = stream.peekByte();
            if ([HEADER_WITH_CRC_SIZE, HEADER_WITHOUT_CRC_SIZE].includes(fileHeaderSize) != true) {
                return false;
            }

            if (stream.length < fileHeaderSize + CRC_SIZE) {
                return false;
            }

            const fileHeader = Decoder.#readFileHeader(stream, { resetPosition: true, });
            if (fileHeader.dataType !== ".FIT") {
                return false;
            }
        }
        catch (error) {
            return false;
        }

        return true;
    }

    /**
     * Inspects the file header to determine if the input stream is a FIT file
     * @returns {Boolean} True if the stream is a FIT file
     */
    isFIT() {
        return Decoder.isFIT(this.#stream);
    }

    /**
     * Checks that the input stream is a FIT file and verifies both the header and file CRC values
     * @returns {Boolean} True if the stream passes the isFit() and CRC checks
     */
    checkIntegrity() {
        try {
            if (!this.isFIT()) {
                return false;
            }

            const fileHeader = Decoder.#readFileHeader(this.#stream, { resetPosition: true, });

            if (this.#stream.length < fileHeader.headerSize + fileHeader.dataSize + CRC_SIZE) {
                return false;
            }

            const buf = new Uint8Array(this.#stream.slice(0, this.#stream.length))

            if (fileHeader.headerSize === HEADER_WITH_CRC_SIZE && fileHeader.headerCRC !== 0x0000
                && fileHeader.headerCRC != CrcCalculator.calculateCRC(buf, 0, 12)) {
                return false;
            }

            const fileCRC = (buf[fileHeader.headerSize + fileHeader.dataSize + 1] << 8) + buf[fileHeader.headerSize + fileHeader.dataSize]
            if (fileCRC != CrcCalculator.calculateCRC(buf, 0, fileHeader.headerSize + fileHeader.dataSize)) {
                return false;
            }
        }
        catch (error) {
            return false;
        }

        return true;
    }

    /**
     * Message Listener Callback
     *
     * @callback Decoder~mesgListener
     * @param {Number} mesgNum - Profile.MesgNum
     * @param {Object} message - The message
     */

    /**
     * Message Definition Listener Callback
     *
     * @callback Decoder~mesgDefinitionListener
     * @param {Object} messageDefinition - The message Definition
     */

    /**
     * Developer Field Description Listener Callback
     *
     * @callback Decoder~fieldDescriptionListener
     * @param {Number} key - The key associated with this pairing of of Developer Data Id and Field Description Mesgs
     * @param {Object} developerDataIdMesg - The Developer Data Id Mesg associated with this pairing
     * @param {Object} fieldDescriptionMesg - The Field Description Mesg associated with this pairing
     */

    /**
     * Read the messages from the stream.
     * @param {Object=} [options] - Read options (optional)
     * @param {Decoder~mesgListener} [options.mesgListener=null] - (optional, default null) mesgListener(mesgNum, message)
     * @param {Decoder~mesgDefinitionListener} [options.mesgDefinitionListener=null] - (optional, default null) mesgDefinitionListener(mesgDefinition)
     * @param {Decoder~fieldDescriptionListener} [options.fieldDescriptionListener=null] - (optional, default null) fieldDescriptionListener(key, developerDataIdMesg, fieldDescriptionMesg)
     * @param {Boolean} [options.expandSubFields=true] - (optional, default true)
     * @param {Boolean} [options.expandComponents=true] - (optional, default true)
     * @param {Boolean} [options.applyScaleAndOffset=true] - (optional, default true)
     * @param {Boolean} [options.convertTypesToStrings=true] - (optional, default true)
     * @param {boolean} [options.convertDateTimesToDates=true] - (optional, default true)
     * @param {Boolean} [options.includeUnknownData=false] - (optional, default false)
     * @param {boolean} [options.mergeHeartRates=true] - (optional, default false)
     * @param {boolean} [options.skipHeader=false] - (optional, default false)
     * @param {boolean} [options.dataOnly=false] - (optional, default false)
     * @return {Object} result - {messages:Array, errors:Array}
     */
    read({
        mesgListener = null,
        mesgDefinitionListener = null,
        fieldDescriptionListener = null,
        expandSubFields = true,
        expandComponents = true,
        applyScaleAndOffset = true,
        convertTypesToStrings = true,
        convertDateTimesToDates = true,
        includeUnknownData = false,
        mergeHeartRates = true,
        skipHeader = false,
        dataOnly = false,} = {}) {

        this.#mesgListener = mesgListener;
        this.#mesgDefinitionListener = mesgDefinitionListener;
        this.#fieldDescriptionListener = fieldDescriptionListener;
        this.#optExpandSubFields = expandSubFields
        this.#optExpandComponents = expandComponents;
        this.#optApplyScaleAndOffset = applyScaleAndOffset;
        this.#optConvertTypesToStrings = convertTypesToStrings;
        this.#optConvertDateTimesToDates = convertDateTimesToDates;
        this.#optIncludeUnknownData = includeUnknownData;
        this.#optMergeHeartRates = mergeHeartRates;

        this.#localMessageDefinitions = [];
        this.#developerDataDefinitions = {};
        this.#messages = {};

        const errors = [];

        try {
            if (this.#optMergeHeartRates && (!this.#optApplyScaleAndOffset || !this.#optExpandComponents)) {
                this.#throwError("mergeHeartRates requires applyScaleAndOffset and expandComponents to be enabled");
            }

            if (dataOnly && skipHeader) {
                this.#throwError("dataOnly and skipHeader cannot both be enabled")
            }

            this.#decodeMode = skipHeader ? DecodeMode.SKIP_HEADER : dataOnly ? DecodeMode.DATA_ONLY : DecodeMode.NORMAL;

            while (this.#stream.position < this.#stream.length) {
                this.#decodeNextFile();
            }

            if (this.#optMergeHeartRates) {
                HrMesgUtils.mergeHeartRates(this.#messages.hrMesgs, this.#messages.recordMesgs);
            }
        }
        catch (error) {
            errors.push(error);
        }
        finally {
            return { messages: this.#messages, errors: errors };
        }
    }

    #decodeNextFile() {
        const position = this.#stream.position;

        if (this.#decodeMode === DecodeMode.NORMAL && !this.isFIT()) {
            this.#throwError("input is not a FIT file");
        }

        this.#stream.crcCalculator = new CrcCalculator();

        const { headerSize, dataSize } = Decoder.#readFileHeader(this.#stream, { decodeMode: this.#decodeMode });

        // Read data messages and definitions
        while (this.#stream.position < (position + headerSize + dataSize)) {
            this.#decodeNextRecord();
        }

        // Check the CRC
        const calculatedCrc = this.#stream.crcCalculator.crc;
        const crc = this.#stream.readUInt16();
        if (this.#decodeMode === DecodeMode.NORMAL && crc !== calculatedCrc) {
            this.#throwError("CRC error");
        }
    }

    #decodeNextRecord() {
        const recordHeader = this.#stream.peekByte();

        if ((recordHeader & COMPRESSED_HEADER_MASK) === COMPRESSED_HEADER_MASK) {
            return this.#decodeCompressedTimestampDataMessage();
        }

        if ((recordHeader & MESG_DEFINITION_MASK) === MESG_HEADER_MASK) {
            return this.#decodeMessage();
        }

        if ((recordHeader & MESG_DEFINITION_MASK) === MESG_DEFINITION_MASK) {
            return this.#decodeMessageDefinition();
        }
    }

    #decodeMessageDefinition() {
        const recordHeader = this.#stream.readByte();

        const messageDefinition = {};
        messageDefinition["recordHeader"] = recordHeader;
        messageDefinition["localMesgNum"] = recordHeader & LOCAL_MESG_NUM_MASK;
        messageDefinition["reserved"] = this.#stream.readByte();

        messageDefinition["architecture"] = this.#stream.readByte();
        messageDefinition["endianness"] = messageDefinition.architecture === 0 ? Stream.LITTLE_ENDIAN : Stream.BIG_ENDIAN;

        messageDefinition["globalMessageNumber"] = this.#stream.readUInt16({ endianness: messageDefinition["endianness"] });
        messageDefinition["numFields"] = this.#stream.readByte();
        messageDefinition["fieldDefinitions"] = [];
        messageDefinition["developerFieldDefinitions"] = [];
        messageDefinition["messageSize"] = 0;
        messageDefinition["developerDataSize"] = 0;

        for (let i = 0; i < messageDefinition.numFields; i++) {
            const fieldDefinition = {
                fieldDefinitionNumber: this.#stream.readByte(),
                size: this.#stream.readByte(),
                baseType: this.#stream.readByte()
            };

            if (!(fieldDefinition.baseType in FIT.BaseTypeDefinitions)) {
                this.#throwError();
            }

            fieldDefinition["invalidValue"] = FIT.BaseTypeDefinitions[fieldDefinition.baseType].invalid;
            fieldDefinition["baseTypeSize"] = FIT.BaseTypeDefinitions[fieldDefinition.baseType].size;

            messageDefinition.fieldDefinitions.push(fieldDefinition);
            messageDefinition.messageSize += fieldDefinition.size;
        }

        if ((recordHeader & DEV_DATA_MASK) === DEV_DATA_MASK) {
            const numDevFields = this.#stream.readByte();

            for (let i = 0; i < numDevFields; i++) {
                const developerFieldDefinition = {
                    fieldDefinitionNumber: this.#stream.readByte(),
                    size: this.#stream.readByte(),
                    developerDataIndex: this.#stream.readByte()
                };

                messageDefinition.developerFieldDefinitions.push(developerFieldDefinition);
                messageDefinition.developerDataSize += developerFieldDefinition.size;
            }
        }

        this.#mesgDefinitionListener?.({...messageDefinition});

        let messageProfile = Profile.messages[messageDefinition.globalMessageNumber];

        if (messageProfile == null && this.#optIncludeUnknownData) {
            messageProfile = {
                name: messageDefinition["globalMessageNumber"].toString(),
                messagesKey: messageDefinition["globalMessageNumber"].toString(),
                num: messageDefinition["globalMessageNumber"],
                fields: {}
            };
        }

        this.#localMessageDefinitions[messageDefinition.localMesgNum] = { ...messageDefinition, ...messageProfile };

        if (messageProfile && !this.#messages.hasOwnProperty(messageProfile.messagesKey)) {
            this.#messages[messageProfile.messagesKey] = [];
        }
    }

    #decodeMessage() {
        const recordHeader = this.#stream.readByte();

        const localMesgNum = recordHeader & LOCAL_MESG_NUM_MASK;
        const messageDefinition = this.#localMessageDefinitions[localMesgNum];

        if (messageDefinition == null) {
            this.#throwError();
        }

        const fields = messageDefinition.fields ?? {};
        const mesgNum = messageDefinition.num;
        const message = {};
        this.#fieldsWithSubFields = [];
        this.#fieldsToExpand = [];

        messageDefinition.fieldDefinitions.forEach(fieldDefinition => {
            const field = fields[fieldDefinition.fieldDefinitionNumber];
            const { fieldName, rawFieldValue } = this.#readFieldValue(messageDefinition, fieldDefinition, field);

            if (fieldName != null && (field != null || this.#optIncludeUnknownData)) {
                message[fieldName] = { rawFieldValue, fieldDefinitionNumber: fieldDefinition.fieldDefinitionNumber };

                if (field?.subFields?.length > 0) {
                    this.#fieldsWithSubFields.push(fieldName);
                }

                if (field?.hasComponents) {
                    this.#fieldsToExpand.push(fieldName);
                }

                if (field?.isAccumulated) {
                    this.#setAccumulatedField(messageDefinition, message, field, rawFieldValue);
                }
            }
        });

        const developerFields = {};

        messageDefinition.developerFieldDefinitions.forEach(developerFieldDefinition => {
            const field = this.#lookupDeveloperDataField(developerFieldDefinition)
            if (field == null) {
                // If there is not a field definition, then read past the field data.
                this.#stream.readBytes(developerFieldDefinition.size);
                return;
            }

            developerFieldDefinition["baseType"] = field.fitBaseTypeId;
            developerFieldDefinition["invalidValue"] = FIT.BaseTypeDefinitions[developerFieldDefinition.baseType].invalid;
            developerFieldDefinition["baseTypeSize"] = FIT.BaseTypeDefinitions[developerFieldDefinition.baseType].size;

            const { rawFieldValue: fieldValue } = this.#readFieldValue(messageDefinition, developerFieldDefinition, field);

            if (fieldValue != null) {
                developerFields[field.key] = fieldValue;
            }
        });

        if (mesgNum === Profile.MesgNum.DEVELOPER_DATA_ID) {
            this.#addDeveloperDataIdToProfile(message);
        }
        else if (mesgNum === Profile.MesgNum.FIELD_DESCRIPTION) {
            const key = Object.keys(this.#developerDataDefinitions)
                .reduce((count, key) => count + this.#developerDataDefinitions[key].fields.length, 0);
            message["key"] = { fieldValue: key, rawFieldValue: key };

            this.#addFieldDescriptionToProfile(message);
        }
        else {
            this.#expandSubFields(mesgNum, message);
            this.#expandComponents(mesgNum, message, fields);
        }

        this.#transformValues(message, messageDefinition);

        if (messageDefinition.name != null) {
            Object.keys(message).forEach((key) => {
                message[key] = message[key].fieldValue;
            });

            if (Object.keys(developerFields).length > 0) {
                message.developerFields = developerFields;
            }

            this.#messages[messageDefinition.messagesKey].push(message);
            this.#mesgListener?.(messageDefinition.globalMessageNumber, message);

            if (mesgNum === Profile.MesgNum.FIELD_DESCRIPTION && this.#fieldDescriptionListener != null) {
                const developerDataIdMesg = this.#messages.developerDataIdMesgs?.find((developerDataIdMesg) => {
                    return developerDataIdMesg.developerDataIndex === message.developerDataIndex;
                }) ?? {};

                this.#fieldDescriptionListener(message.key, {...developerDataIdMesg}, {...message});
            }
        }
    }

    #decodeCompressedTimestampDataMessage() {
        this.#throwError("compressed timestamp messages are not currently supported");
    }

    #readFieldValue(messageDefinition, fieldDefinition, field) {
        const rawFieldValue = this.#readRawFieldValue(messageDefinition, fieldDefinition, field);

        if (rawFieldValue == null) {
            return {};
        }

        return {
            fieldName: (field?.name ?? ~~fieldDefinition.fieldDefinitionNumber),
            rawFieldValue
        };
    }

    #readRawFieldValue(messageDefinition, fieldDefinition, field) {
        const rawFieldValue = this.#stream.readValue(
            fieldDefinition.baseType,
            fieldDefinition.size,
            {
                endianness: messageDefinition["endianness"],
                convertInvalidToNull: !field?.hasComponents ?? false
            }
        );
        return rawFieldValue;
    }

    #addDeveloperDataIdToProfile(message) {
        if (message == null || message.developerDataIndex.rawFieldValue == null || message.developerDataIndex.rawFieldValue === 0xFF) {
            return;
        }

        this.#developerDataDefinitions[message.developerDataIndex.rawFieldValue] = {
            developerDataIndex: message.developerDataIndex?.rawFieldValue,
            developerId: message.developerId?.rawFieldValue ?? null,
            applicationId: message.applicationId?.rawFieldValue ?? null,
            manufacturerId: message.manufacturerId?.rawFieldValue ?? null,
            applicationVersion: message.applicationVersion?.rawFieldValue ?? null,
            fields: []
        };
    }

    #addFieldDescriptionToProfile(message) {
        if (message == null || message.developerDataIndex.rawFieldValue == null || message.developerDataIndex.rawFieldValue === 0xFF) {
            return;
        }

        if (this.#developerDataDefinitions[message.developerDataIndex.rawFieldValue] == null) {
            return;
        }

        this.#developerDataDefinitions[message.developerDataIndex.rawFieldValue].fields.push({
            developerDataIndex: message.developerDataIndex?.rawFieldValue,
            fieldDefinitionNumber: message.fieldDefinitionNumber?.rawFieldValue,
            fitBaseTypeId: message.fitBaseTypeId?.rawFieldValue ?? null,
            fieldName: message.fieldName?.rawFieldValue ?? null,
            array: message.array?.rawFieldValue ?? null,
            components: message.components?.rawFieldValue ?? null,
            scale: message.scale?.rawFieldValue ?? null,
            offset: message.offset?.rawFieldValue ?? null,
            units: message.units?.rawFieldValue ?? null,
            bits: message.bits?.rawFieldValue ?? null,
            accumulate: message.accumulate?.rawFieldValue ?? null,
            refFieldName: message.refFieldName?.rawFieldValue ?? null,
            refFieldValue: message.refFieldValue?.rawFieldValue ?? null,
            fitBaseUnitId: message.fitBaseUnitId?.rawFieldValue ?? null,
            nativeMesgNum: message.nativeMesgNum?.rawFieldValue ?? null,
            nativeFieldNum: message.nativeFieldNum?.rawFieldValue ?? null,
            key: message.key.rawFieldValue
        });
    }

    #lookupDeveloperDataField(developerFieldDefinition) {
        try {
            return this.#developerDataDefinitions[developerFieldDefinition.developerDataIndex]
                ?.fields
                ?.find(def => def.fieldDefinitionNumber == developerFieldDefinition.fieldDefinitionNumber)
                ?? null;
        }
        catch {
            return null;
        }
    }

    #expandSubFields(mesgNum, message) {
        if (!this.#optExpandSubFields || this.#fieldsWithSubFields.length == 0) {
            return;
        }

        this.#fieldsWithSubFields.forEach((name) => {
            const field = Profile.messages[mesgNum].fields[message[name].fieldDefinitionNumber];
            this.#expandSubField(message, field);
        });
    }

    #expandSubField(message, field) {
        for (let i = 0; i < field.subFields.length; i++) {
            const subField = field.subFields[i];
            for (let j = 0; j < subField.map.length; j++) {
                const map = subField.map[j];
                const referenceField = message[map.name];
                if (referenceField == null) {
                    continue;
                }
                if (referenceField.rawFieldValue === map.value) {
                    message[subField.name] = JSON.parse(JSON.stringify(message[field.name]));
                    message[subField.name].isSubField = true;

                    if (subField.hasComponents) {
                        this.#fieldsToExpand.push(subField.name);
                    }
                    break;
                }
            }
        }
    }

    #expandComponents(mesgNum, message, fields) {
        // TODO - What do do when the target field is not in the Profile?
        // TODO - This can happen in theory, but can it happen in practice?

        if (!this.#optExpandComponents || this.#fieldsToExpand.length == 0) {
            return;
        }

        const mesg = {};

        while (this.#fieldsToExpand.length > 0) {
            const name = this.#fieldsToExpand.shift();

            const { rawFieldValue, fieldDefinitionNumber, isSubField } = message[name] ?? mesg[name];
            let field = Profile.messages[mesgNum].fields[fieldDefinitionNumber];
            field = isSubField ? this.#lookupSubfield(field, name) : field;
            const baseType = FIT.FieldTypeToBaseType[field.type];

            if (field.hasComponents === false || baseType == null) {
                continue;
            }

            if (UtilsInternal.onlyInvalidValues(rawFieldValue, FIT.BaseTypeDefinitions[baseType].invalid)) {
                continue;
            }

            const bitStream = new BitStream(rawFieldValue, baseType);

            for (let j = 0; j < field.components.length; j++) {
                if (bitStream.bitsAvailable < field.bits[j]) {
                    break;
                }

                const targetField = fields[field.components[j]];
                if (mesg[targetField.name] == null) {
                    const baseType = FIT.FieldTypeToBaseType[targetField.type];
                    const invalidValue = baseType != null ? FIT.BaseTypeDefinitions[baseType].invalid : 0xFF;

                    mesg[targetField.name] = {
                        fieldValue: [],
                        rawFieldValue: [],
                        fieldDefinitionNumber: targetField.num,
                        isExpandedField: true,
                        invalidValue,
                    };
                }

                let value = bitStream.readBits(field.bits[j]);

                if (targetField.isAccumulated) {
                    value = this.#accumulator.accumulate(mesgNum, targetField.num, value, field.bits[j]);
                }

                // Undo component scale and offset before applying the destination field's scale and offset
                value = (value / field.scale[j] - field.offset[j]);

                const rawValue = (value + targetField.offset) * targetField.scale;
                mesg[targetField.name].rawFieldValue.push(rawValue);

                if (rawValue === mesg[targetField.name].invalidValue) {
                    mesg[targetField.name].fieldValue.push(null);
                }
                else {
                    if (this.#optConvertTypesToStrings) {
                        value = this.#convertTypeToString(mesg, targetField, value);
                    }

                    mesg[targetField.name].fieldValue.push(value);
                }

                if (targetField.hasComponents) {
                    this.#fieldsToExpand.push(targetField.name);
                }

                if (!bitStream.hasBitsAvailable) {
                    break;
                }
            }
        }

        Object.keys(mesg).forEach((key) => {
            mesg[key].fieldValue = UtilsInternal.sanitizeValues(mesg[key].fieldValue);
            mesg[key].rawFieldValue = UtilsInternal.sanitizeValues(mesg[key].rawFieldValue);

            message[key] = mesg[key];
        });
    }

    #transformValues(message, messageDefinition) {
        const fields = messageDefinition?.fields ?? {};

        for (const name in message) {

            const { rawFieldValue, fieldDefinitionNumber, isExpandedField, isSubField } = message[name];

            let field = fields[fieldDefinitionNumber];
            field = isSubField ? this.#lookupSubfield(field, name) : field;

            if (!isExpandedField) {
                const fieldValue = this.#transformValue(messageDefinition, field, rawFieldValue);
                message[name].fieldValue = fieldValue;
            }
        }
    }

    #transformValue(messageDefinition, field, rawFieldValue) {
        let fieldValue = rawFieldValue;

        if (field == null) {
            fieldValue = rawFieldValue;
        }
        else if (FIT.NumericFieldTypes.includes(field?.type ?? -1)) {
            fieldValue = this.#applyScaleAndOffset(messageDefinition, field, rawFieldValue);
        }
        else if (field.type === "string") {
            fieldValue = rawFieldValue;
        }
        else if (field.type === "dateTime" && this.#optConvertDateTimesToDates) {
            fieldValue = Utils.convertDateTimeToDate(rawFieldValue);
        }
        else if (this.#optConvertTypesToStrings) {
            fieldValue = this.#convertTypeToString(messageDefinition, field, rawFieldValue);
        }
        else {
            fieldValue = rawFieldValue;
        }

        return fieldValue;
    }

    #applyScaleAndOffset(messageDefinition, field, rawFieldValue) {
        if (!this.#optApplyScaleAndOffset) {
            return rawFieldValue;
        }

        if (FIT.NumericFieldTypes.includes(field?.type ?? -1) === false) {
            return rawFieldValue;
        }

        if ([Profile.MesgNum.DEVELOPER_DATA_ID, Profile.MesgNum.FIELD_DESCRIPTION].includes(messageDefinition.globalMessageNumber)) {
            return rawFieldValue;
        }

        if (rawFieldValue == null) {
            return rawFieldValue;
        }

        if (Array.isArray(field?.scale ?? 1) && field.scale.length > 1) {
            return rawFieldValue;
        }

        const scale = Array.isArray(field?.scale ?? 1) ? field?.scale[0] : field?.scale ?? 1;
        const offset = Array.isArray(field?.offset ?? 1) ? field?.offset[0] : field?.offset ?? 0;

        try {
            if (Array.isArray(rawFieldValue)) {
                return rawFieldValue.map((value) => {
                    return value == null ? value : (value / scale) - offset;
                });
            }

            return (rawFieldValue / scale) - offset;
        }
        catch {
            return rawFieldValue;
        }
    }

    #setAccumulatedField(messageDefinition, message, field, rawFieldValue) {
        const rawFieldValues = Array.isArray(rawFieldValue) ? rawFieldValue : [rawFieldValue];

        rawFieldValues.forEach((value) => {
            Object.values(message).forEach((containingField) => {
                let components = messageDefinition.fields[containingField.fieldDefinitionNumber].components ?? []

                components.forEach((componentFieldNum, i) => {
                    const targetField = messageDefinition.fields[componentFieldNum];

                    if(targetField?.num == field.num && targetField?.isAccumulated) {
                        value = (((value / field.scale) - field.offset) + containingField.offset[i]) * containingField.scale[i];
                    }
                });
            });

            this.#accumulator.createAccumulatedField(messageDefinition.num, field.num, value);
        });
    }

    #convertTypeToString(messageDefinition, field, rawFieldValue) {
        if ([Profile.MesgNum.DEVELOPER_DATA_ID, Profile.MesgNum.FIELD_DESCRIPTION].includes(messageDefinition.globalMessageNumber)) {
            return rawFieldValue;
        }

        if (FIT.NumericFieldTypes.includes(field?.type ?? -1)) {
            return rawFieldValue;
        }

        try {
            const type = Profile.types[field?.type ?? -1];

            if (Array.isArray(rawFieldValue)) {
                return rawFieldValue.map(value => {
                    return value == null ? value : type?.[value] ?? value
                });
            }

            return type?.[rawFieldValue] ?? rawFieldValue;
        }
        catch {
            return rawFieldValue;
        }
    }

    #lookupSubfield(field, name) {
        const subField = field.subFields.find(subField => subField.name === name);
        return subField != null ? subField : {};
    }

    static #readFileHeader(stream, { resetPosition = false, decodeMode = DecodeMode.NORMAL }) {
        const position = stream.position;

        if(decodeMode !== DecodeMode.NORMAL) {
            if(decodeMode === DecodeMode.SKIP_HEADER) {
                stream.seek(HEADER_WITH_CRC_SIZE);
            }

            const headerSize = decodeMode === DecodeMode.SKIP_HEADER ? HEADER_WITH_CRC_SIZE : 0;

            return {
                headerSize,
                dataSize:  stream.length - headerSize - CRC_SIZE,
            };
        }

        const fileHeader = {
            headerSize: stream.readByte(),
            protocolVersion: stream.readByte(),
            profileVersion: stream.readUInt16(),
            dataSize: stream.readUInt32(),
            dataType: stream.readString(4),
            headerCRC: 0
        };

        if (fileHeader.headerSize === 14) {
            fileHeader.headerCRC = stream.readUInt16()
        }

        if (resetPosition) {
            stream.seek(position);
        }

        return fileHeader;
    }

    #throwError(error = "") {
        throw Error(`FIT Runtime Error at byte ${this.#stream.position} ${error}`.trimEnd());
    }
}

export default Decoder;